//
//  HttpTool.m
//  FoodSafetyAssistant
//
//  Created by 新龙科技 on 16/8/11.
//  Copyright © 2016年 新龙信息. All rights reserved.
//

#import "HttpTool.h"

@implementation HttpTool
+ (HttpTool *)sharedInstance {
  static id sharedInstance = nil;
  static dispatch_once_t onceToken;
  dispatch_once(&onceToken, ^{
    sharedInstance = [[self alloc] init];
  });
  return sharedInstance;
}

/**
 *  普通的 post 请求
 *
 *  @param url        接口地址 Url
 *  @param parameters 请求参数
 *  @param sucess     成功后的回调
 *  @param failur     失败后的回调
 */
- (void)postWithUrl:(NSString *)url
         parameters:(NSDictionary *)parameters
             sucess:(BaseHttpToolSucess)sucess
             failur:(BaseHttpToolFailur)failur {

  // 初始化Manager
  AFHTTPSessionManager *manager = [AFHTTPSessionManager manager];
  // 不加上这句话，会报“Request failed: unacceptable content-type:
  // text/plain”错误，因为我们要获取text/plain类型数据
  manager.responseSerializer = [AFHTTPResponseSerializer serializer];
  manager.responseSerializer.acceptableContentTypes =
      [NSSet setWithObjects:@"text/html", @"application/json", nil];
  manager.requestSerializer.timeoutInterval = 20;
  NSString *URLS = [BASEURL stringByAppendingString:url];
  NSLog(@"url:%@ ------- parmeters:%@ ", URLS, parameters);
  [manager POST:URLS
      parameters:parameters
      progress:^(NSProgress *_Nonnull uploadProgress) {

      }
      success:^(NSURLSessionDataTask *_Nonnull task,
                id _Nullable responseObject) {

        NSDictionary *dict = [NSJSONSerialization
            JSONObjectWithData:responseObject
                       options:NSJSONReadingMutableContainers
                         error:nil];
        if (sucess) {
          NSString *str = [self dictionaryToJson:dict];
          NSLog(@"返回的数据为%@", str);
          sucess(dict);
        }
      }
      failure:^(NSURLSessionDataTask *_Nullable task, NSError *_Nonnull error) {
        NSLog(@"错误为%@", error);
        if (failur) {
          failur(error);
        }
      }];
}

/**
 *  普通的 get 请求
 *
 *  @param url        接口地址 Url
 *  @param parameters 请求参数
 *  @param sucess     成功后的回调
 *  @param failur     失败后的回调
 */
- (void)getWithUrl:(NSString *)url
        parameters:(NSDictionary *)parameters
            sucess:(BaseHttpToolSucess)sucess
            failur:(BaseHttpToolFailur)failur {

  AFHTTPSessionManager *manager = [AFHTTPSessionManager manager];
  manager.responseSerializer = [AFHTTPResponseSerializer serializer];
  manager.responseSerializer.acceptableContentTypes =
      [NSSet setWithObjects:@"text/html", @"application/json", nil];
  manager.requestSerializer.timeoutInterval = 20;
  NSString *URLS = [BASEURL stringByAppendingString:url];

  [manager GET:URLS
      parameters:parameters
      progress:^(NSProgress *_Nonnull downloadProgress) {
      }
      success:^(NSURLSessionDataTask *_Nonnull task,
                id _Nullable responseObject) {
        NSDictionary *dict = [NSJSONSerialization
            JSONObjectWithData:responseObject
                       options:NSJSONReadingMutableContainers
                         error:nil];
        //        NSString *str = [self dictionaryToJson:dict];
        if (sucess) {
          sucess(dict);
        }
        NSLog(@"返回的数据为%@", dict);

      }
      failure:^(NSURLSessionDataTask *_Nullable task, NSError *_Nonnull error) {
        NSLog(@"错误为%@", error);
        if (failur) {
          failur(error);
        }

      }];
}

//提交照片
- (void)postImage:(NSArray *)images
       parameters:(NSDictionary *)parameters
              url:(NSString *)url
           sucess:(BaseHttpToolSucess)sucess
           failur:(BaseHttpToolFailur)failur
      andProgress:(BaseHttpProgress)progress {
  AFHTTPSessionManager *manager = [AFHTTPSessionManager manager];
  manager.responseSerializer = [AFHTTPResponseSerializer serializer];
  manager.responseSerializer.acceptableContentTypes = [NSSet
      setWithObjects:@"text/html", @"application/json", @"text/plain", nil];
  manager.requestSerializer.timeoutInterval = 20;
  NSString *URLS = [BASEURL stringByAppendingString:url];
  [manager POST:URLS
      parameters:parameters
      constructingBodyWithBlock:^(id<AFMultipartFormData> _Nonnull formData) {
        for (UIImage *img in images) {
          NSData *imgdata = UIImageJPEGRepresentation(img, 0.5);
          NSString *name = [self getCurrentTime];
          NSString *fileName = [NSString stringWithFormat:@"%@.jpg", name];
          [formData appendPartWithFileData:imgdata
                                      name:@"image"
                                  fileName:fileName
                                  mimeType:@"jpg"];
        }
      }
      progress:^(NSProgress *_Nonnull uploadProgress) {

      }
      success:^(NSURLSessionDataTask *_Nonnull task,
                id _Nullable responseObject) {
        NSDictionary *dict = [NSJSONSerialization
            JSONObjectWithData:responseObject
                       options:NSJSONReadingMutableContainers
                         error:nil];
        NSLog(@"返回的数据为%@", dict);

        if (sucess) {
          sucess(dict);
        }
      }
      failure:^(NSURLSessionDataTask *_Nullable task, NSError *_Nonnull error) {
        NSLog(@"错误为%@", error);
        NSLog(@"错误描述为%@", [error localizedDescription]);
        if (failur) {
          failur(error);
        }
      }];
}

/**
 *  删除请求
 *
 *  @param url        接口地址 Url
 *  @param parameters 请求参数
 *  @param sucess     成功后的回调
 *  @param failur     失败后的回调
 */
- (void)DeleteWithUrl:(NSString *)url
           parameters:(NSDictionary *)parameters
               sucess:(BaseHttpToolSucess)sucess
               failur:(BaseHttpToolFailur)failur {
  AFHTTPSessionManager *manager = [AFHTTPSessionManager manager];
  manager.responseSerializer = [AFHTTPResponseSerializer serializer];
  manager.responseSerializer.acceptableContentTypes =
      [NSSet setWithObjects:@"text/html", @"application/json", nil];
  manager.requestSerializer.timeoutInterval = 20;
  NSString *URLS = [BASEURL stringByAppendingString:url];
  [manager DELETE:URLS
      parameters:parameters
      success:^(NSURLSessionDataTask *_Nonnull task,
                id _Nullable responseObject) {
        NSLog(@"返回的数据为%@", responseObject);
        NSDictionary *dict = [NSJSONSerialization
            JSONObjectWithData:responseObject
                       options:NSJSONReadingMutableContainers
                         error:nil];
        if (sucess) {
          sucess(dict);
        }
      }
      failure:^(NSURLSessionDataTask *_Nullable task, NSError *_Nonnull error) {
        NSLog(@"错误为%@", error);
        if (failur) {
          failur(error);
        }
      }];
}
/**
 *  普通的 put 请求
 *
 *  @param url        接口地址 Url
 *  @param parameters 请求参数
 *  @param sucess     成功后的回调
 *  @param failur     失败后的回调
 */
- (void)putWithUrl:(NSString *)url
        parameters:(NSDictionary *)parameters
            sucess:(BaseHttpToolSucess)sucess
            failur:(BaseHttpToolFailur)failur {
  AFHTTPSessionManager *manager = [AFHTTPSessionManager manager];
  manager.responseSerializer = [AFHTTPResponseSerializer serializer];
  manager.responseSerializer.acceptableContentTypes =
      [NSSet setWithObjects:@"text/html", @"application/json", nil];
  manager.requestSerializer.timeoutInterval = 20;
  NSString *URLS = [BASEURL stringByAppendingString:url];

  [manager PUT:URLS
      parameters:parameters
      success:^(NSURLSessionDataTask *_Nonnull task,
                id _Nullable responseObject) {
        NSDictionary *dict = [NSJSONSerialization
            JSONObjectWithData:responseObject
                       options:NSJSONReadingMutableContainers
                         error:nil];
        //        NSString *str = [self dictionaryToJson:dict];
        if (sucess) {
          sucess(dict);
        }
        NSLog(@"返回的数据为%@", dict);
      }
      failure:^(NSURLSessionDataTask *_Nullable task, NSError *_Nonnull error) {
        NSLog(@"错误为%@", error);
        if (failur) {
          failur(error);
        }

      }];
}
//字典转化成字符串
- (NSString *)dictionaryToJson:(NSDictionary *)dic

{

  NSError *parseError = nil;

  NSData *jsonData =
      [NSJSONSerialization dataWithJSONObject:dic
                                      options:NSJSONWritingPrettyPrinted
                                        error:&parseError];
  return [[NSString alloc] initWithData:jsonData encoding:NSUTF8StringEncoding];
}

- (void)upLoadToUrlString:(NSString *)url
               parameters:(NSDictionary *)parameters
                 fileData:(NSMutableArray *)fileData
                 mimeType:(NSMutableArray *)mimeType
                 progress:(void (^)(NSProgress *))progress
                  success:(void (^)(NSURLSessionDataTask *, id))success
                  failure:(void (^)(NSURLSessionDataTask *, NSError *))failure {
  NSLog(@"%lu", (unsigned long)fileData.count);
  //视频上传
  NSString *URL = [NSString stringWithFormat:@"%@%@", BASEURL, url];
  NSLog(@"URL:%@-------\nparameters:%@", URL, parameters);
  AFHTTPSessionManager *manager = [AFHTTPSessionManager manager];
  manager.responseSerializer = [AFHTTPResponseSerializer serializer];
  // 3.设置相应数据支持的类型
  [manager.responseSerializer
      setAcceptableContentTypes:
          [NSSet setWithObjects:@"application/json", @"text/json",
                                @"text/javascript", @"text/html", @"text/css",
                                @"text/plain", @"application/javascript",
                                @"application/json",
                                @"application/x-www-form-urlencoded", nil]];

  [manager POST:URL
      parameters:parameters
      constructingBodyWithBlock:^(id<AFMultipartFormData> _Nonnull formData) {
        for (int i = 0; i < fileData.count; i++) {
          NSString *name =
              [NSString stringWithFormat:@"%@%d", [self getCurrentTime], i];
          NSString *fileName =
              [NSString stringWithFormat:@"%@%d.%@", name, i + 1, mimeType[i]];
          NSLog(@"%@", fileName);
          [formData appendPartWithFileData:fileData[i]
                                      name:name
                                  fileName:fileName
                                  mimeType:mimeType[i]];
        }
      }
      progress:^(NSProgress *_Nonnull uploadProgress) {

      }
      success:^(NSURLSessionDataTask *_Nonnull task,
                id _Nullable responseObject) {

        if (success) {
          NSDictionary *dict = [NSJSONSerialization
              JSONObjectWithData:responseObject
                         options:NSJSONReadingMutableContainers
                           error:nil];
          NSLog(@"%@", dict);
          success(task, dict);
        }
      }
      failure:^(NSURLSessionDataTask *_Nullable task, NSError *_Nonnull error) {
        NSLog(@"%@", error);
        if (failure) {
          failure(task, error);
        }
      }];
}

// 获取当前时间
- (NSString *)getCurrentTime {
    NSDate *datenow = [NSDate date];
  NSString *timeSp = [NSString stringWithFormat:@"%ld", (long)[datenow timeIntervalSince1970]];
  return timeSp;
}

/**
 判断网络状态
 **/
- (void)startMonitoring {
  // 1.获得网络监控的管理者
  AFNetworkReachabilityManager *manager =
      [AFNetworkReachabilityManager sharedManager];
  // 2.设置网络状态改变后的处理
  [manager
      setReachabilityStatusChangeBlock:^(AFNetworkReachabilityStatus status) {
        switch (status) {

        case AFNetworkReachabilityStatusUnknown: {

        }

        break;
        case AFNetworkReachabilityStatusNotReachable:
          KOMG(@"你当前的网络状态：无网络");
          break;

        case AFNetworkReachabilityStatusReachableViaWWAN:
          KOMG(@"你当前的网络状态：数据网络");
          break;

        case AFNetworkReachabilityStatusReachableViaWiFi:
          KOMG(@"你当前的网络状态：WiFi");

          break;

        default:
          break;
        }

      }];
  [manager startMonitoring];
}

#pragma mark 获取ipv6地址
+ (NSString *)formatIPV6Address:(struct in6_addr)ipv6Addr {
  NSString *address = nil;

  char dstStr[INET6_ADDRSTRLEN];
  char srcStr[INET6_ADDRSTRLEN];
  memcpy(srcStr, &ipv6Addr, sizeof(struct in6_addr));
  if (inet_ntop(AF_INET6, srcStr, dstStr, INET6_ADDRSTRLEN) != NULL) {
    address = [NSString stringWithUTF8String:dstStr];
  }

  return address;
}
#pragma mark 获取ipv4地址
+ (NSString *)getIPAddress {
  NSString *address = @"error";
  struct ifaddrs *interfaces = NULL;
  struct ifaddrs *temp_addr = NULL;
  int success = 0;
  // retrieve the current interfaces - returns 0 on success
  success = getifaddrs(&interfaces);
  if (success == 0) {
    // Loop through linked list of interfaces
    temp_addr = interfaces;
    while (temp_addr != NULL) {
      if (temp_addr->ifa_addr->sa_family == AF_INET) {
        // Check if interface is en0 which is the wifi connection on the iPhone
        if ([[NSString stringWithUTF8String:temp_addr->ifa_name]
                isEqualToString:@"en0"]) {
          // Get NSString from C String
          address =
              [NSString stringWithUTF8String:inet_ntoa(((struct sockaddr_in *)
                                                            temp_addr->ifa_addr)
                                                           ->sin_addr)];
        }
      }
      temp_addr = temp_addr->ifa_next;
    }
  }
  // Free memory
  freeifaddrs(interfaces);
  return address;
}

//获得设备型号
+ (NSString *)iphoneType {

  struct utsname systemInfo;

  uname(&systemInfo);

  NSString *platform = [NSString stringWithCString:systemInfo.machine
                                          encoding:NSASCIIStringEncoding];

  if ([platform isEqualToString:@"iPhone1,1"])
    return @"iPhone 2G";

  if ([platform isEqualToString:@"iPhone1,2"])
    return @"iPhone 3G";

  if ([platform isEqualToString:@"iPhone2,1"])
    return @"iPhone 3GS";

  if ([platform isEqualToString:@"iPhone3,1"])
    return @"iPhone 4";

  if ([platform isEqualToString:@"iPhone3,2"])
    return @"iPhone 4";

  if ([platform isEqualToString:@"iPhone3,3"])
    return @"iPhone 4";

  if ([platform isEqualToString:@"iPhone4,1"])
    return @"iPhone 4S";

  if ([platform isEqualToString:@"iPhone5,1"])
    return @"iPhone 5";

  if ([platform isEqualToString:@"iPhone5,2"])
    return @"iPhone 5";

  if ([platform isEqualToString:@"iPhone5,3"])
    return @"iPhone 5c";

  if ([platform isEqualToString:@"iPhone5,4"])
    return @"iPhone 5c";

  if ([platform isEqualToString:@"iPhone6,1"])
    return @"iPhone 5s";

  if ([platform isEqualToString:@"iPhone6,2"])
    return @"iPhone 5s";

  if ([platform isEqualToString:@"iPhone7,1"])
    return @"iPhone 6 Plus";

  if ([platform isEqualToString:@"iPhone7,2"])
    return @"iPhone 6";

  if ([platform isEqualToString:@"iPhone8,1"])
    return @"iPhone 6s";

  if ([platform isEqualToString:@"iPhone8,2"])
    return @"iPhone 6s Plus";

  if ([platform isEqualToString:@"iPhone8,4"])
    return @"iPhone SE";

  if ([platform isEqualToString:@"iPhone9,1"])
    return @"iPhone 7";

  if ([platform isEqualToString:@"iPhone9,2"])
    return @"iPhone 7 Plus";

  if ([platform isEqualToString:@"iPod1,1"])
    return @"iPod Touch 1G";

  if ([platform isEqualToString:@"iPod2,1"])
    return @"iPod Touch 2G";

  if ([platform isEqualToString:@"iPod3,1"])
    return @"iPod Touch 3G";

  if ([platform isEqualToString:@"iPod4,1"])
    return @"iPod Touch 4G";

  if ([platform isEqualToString:@"iPod5,1"])
    return @"iPod Touch 5G";

  if ([platform isEqualToString:@"iPad1,1"])
    return @"iPad 1G";

  if ([platform isEqualToString:@"iPad2,1"])
    return @"iPad 2";

  if ([platform isEqualToString:@"iPad2,2"])
    return @"iPad 2";

  if ([platform isEqualToString:@"iPad2,3"])
    return @"iPad 2";

  if ([platform isEqualToString:@"iPad2,4"])
    return @"iPad 2";

  if ([platform isEqualToString:@"iPad2,5"])
    return @"iPad Mini 1G";

  if ([platform isEqualToString:@"iPad2,6"])
    return @"iPad Mini 1G";

  if ([platform isEqualToString:@"iPad2,7"])
    return @"iPad Mini 1G";

  if ([platform isEqualToString:@"iPad3,1"])
    return @"iPad 3";

  if ([platform isEqualToString:@"iPad3,2"])
    return @"iPad 3";

  if ([platform isEqualToString:@"iPad3,3"])
    return @"iPad 3";

  if ([platform isEqualToString:@"iPad3,4"])
    return @"iPad 4";

  if ([platform isEqualToString:@"iPad3,5"])
    return @"iPad 4";

  if ([platform isEqualToString:@"iPad3,6"])
    return @"iPad 4";

  if ([platform isEqualToString:@"iPad4,1"])
    return @"iPad Air";

  if ([platform isEqualToString:@"iPad4,2"])
    return @"iPad Air";

  if ([platform isEqualToString:@"iPad4,3"])
    return @"iPad Air";

  if ([platform isEqualToString:@"iPad4,4"])
    return @"iPad Mini 2G";

  if ([platform isEqualToString:@"iPad4,5"])
    return @"iPad Mini 2G";

  if ([platform isEqualToString:@"iPad4,6"])
    return @"iPad Mini 2G";

  if ([platform isEqualToString:@"i386"])
    return @"iPhone Simulator";

  if ([platform isEqualToString:@"x86_64"])
    return @"iPhone Simulator";

  return platform;
}

@end
